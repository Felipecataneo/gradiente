import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import tempfile
import os

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(layout="wide", page_title="Descida do Gradiente - An√°lise Completa", page_icon="üèîÔ∏è")

# --- Fun√ß√µes Matem√°ticas ---
def f(x, y):
    """Fun√ß√£o objetivo: f(x,y) = xy * exp(-x¬≤ - y¬≤)"""
    return x * y * np.exp(-x**2 - y**2)

def grad_f(x, y):
    """Gradiente da fun√ß√£o f"""
    exp_term = np.exp(-x**2 - y**2)
    df_dx = y * exp_term * (1 - 2*x**2)
    df_dy = x * exp_term * (1 - 2*y**2)
    return np.array([df_dx, df_dy])

def algoritmo_gradiente_norma(ponto_inicial, lambda_passo, tolerancia=0.00001, max_iter=2000):
    """Executa o algoritmo de descida do gradiente usando a norma do gradiente como crit√©rio de parada."""
    ponto_atual = ponto_inicial.copy()
    caminho = [ponto_atual.copy()]
    historico_norma_grad = []
    historico_funcao = []
    
    for i in range(max_iter):
        gradiente = grad_f(ponto_atual[0], ponto_atual[1])
        norma_grad = np.linalg.norm(gradiente)
        
        historico_norma_grad.append(norma_grad)
        historico_funcao.append(f(ponto_atual[0], ponto_atual[1]))
        
        if norma_grad < tolerancia:
            break
            
        ponto_atual = ponto_atual - lambda_passo * gradiente
        caminho.append(ponto_atual.copy())
    
    return np.array(caminho), i, historico_norma_grad, historico_funcao

# <-- MUDAN√áA: Ajustes no texto para remover subscritos
def create_pdf_report(params, resultados, paths_graficos):
    """Cria relat√≥rio em PDF com todos os resultados e gr√°ficos."""
    
    temp_dir = tempfile.mkdtemp()
    pdf_path = os.path.join(temp_dir, "relatorio_gradiente.pdf")
    
    doc = SimpleDocTemplate(pdf_path, pagesize=A4, topMargin=inch/2, bottomMargin=inch/2)
    styles = getSampleStyleSheet()
    story = []

    title_style = ParagraphStyle('CustomTitle', parent=styles['h1'], fontSize=16, spaceAfter=20, alignment=1, textColor=colors.darkblue)
    story.append(Paragraph("Relat√≥rio - Algoritmo de Descida Mais √çngreme", title_style))
    
    story.append(Paragraph("Par√¢metros da Simula√ß√£o", styles['h2']))
    # Texto ajustado: "x0" e "y0" em vez de caracteres de subscrito
    params_text = f"""
    ‚Ä¢ Ponto inicial (x0, y0): ({params['x0']:.2f}, {params['y0']:.2f})<br/>
    ‚Ä¢ Tamanho do passo (Œª): {params['lambda']}<br/>
    ‚Ä¢ Crit√©rio de parada: Norma do Gradiente &lt; {params['tolerancia']}
    """
    story.append(Paragraph(params_text, styles['Normal']))
    story.append(Spacer(1, 20))

    story.append(Paragraph("Resolu√ß√£o Manual - Primeiras Itera√ß√µes", styles['h2']))
    caminho_manual = resultados['caminho_manual']
    for i in range(min(2, len(caminho_manual) - 1)):
        p_atual, p_novo = caminho_manual[i], caminho_manual[i+1]
        grad = grad_f(p_atual[0], p_atual[1])
        story.append(Paragraph(f"<b>Itera√ß√£o {i+1}</b>", styles['h3']))
        # Texto ajustado: removidas as tags <sub> para compatibilidade
        manual_text = f"""
        Ponto atual (x{i}, y{i}): ({p_atual[0]:.5f}, {p_atual[1]:.5f})<br/>
        Gradiente ‚àáf: [{grad[0]:.5f}, {grad[1]:.5f}]<br/>
        Novo ponto (x{i+1}, y{i+1}): ({p_novo[0]:.5f}, {p_novo[1]:.5f})
        """
        story.append(Paragraph(manual_text, styles['Normal']))
        story.append(Spacer(1, 12))
        
    story.append(PageBreak())
    
    ponto_minimo = resultados['ponto_minimo']
    story.append(Paragraph("Resultado do Algoritmo Completo", styles['h2']))
    results_text = f"""
    ‚Ä¢ Converg√™ncia alcan√ßada em: <b>{resultados['iteracoes']} itera√ß√µes</b><br/>
    ‚Ä¢ Ponto de m√≠nimo encontrado: ({ponto_minimo[0]:.6f}, {ponto_minimo[1]:.6f})<br/>
    ‚Ä¢ Valor m√≠nimo da fun√ß√£o: {f(ponto_minimo[0], ponto_minimo[1]):.8f}
    """
    story.append(Paragraph(results_text, styles['Normal']))
    story.append(Spacer(1, 20))

    story.append(Paragraph("Gr√°ficos da Execu√ß√£o", styles['h2']))
    story.append(Paragraph("Vis√£o 3D e Curvas de N√≠vel com o Caminho da Otimiza√ß√£o:", styles['Normal']))
    story.append(Spacer(1, 12))
    
    img1 = Image(paths_graficos['caminho_3d'], width=3.5*inch, height=2.8*inch)
    img2 = Image(paths_graficos['caminho_contorno'], width=3.5*inch, height=2.8*inch)
    
    tabela_graficos1 = Table([[img1, img2]], colWidths=[3.6*inch, 3.6*inch])
    tabela_graficos1.setStyle(TableStyle([('VALIGN', (0,0), (-1,-1), 'TOP'), ('PADDING', (0,0), (-1,-1), 0)]))
    story.append(tabela_graficos1)
    story.append(Spacer(1, 20))

    story.append(Paragraph("Gr√°ficos de Converg√™ncia:", styles['Normal']))
    story.append(Spacer(1, 12))
    img3 = Image(paths_graficos['convergencia_norma'], width=3.5*inch, height=2.8*inch)
    img4 = Image(paths_graficos['convergencia_funcao'], width=3.5*inch, height=2.8*inch)

    tabela_graficos2 = Table([[img3, img4]], colWidths=[3.6*inch, 3.6*inch])
    tabela_graficos2.setStyle(TableStyle([('VALIGN', (0,0), (-1,-1), 'TOP'), ('PADDING', (0,0), (-1,-1), 0)]))
    story.append(tabela_graficos2)

    doc.build(story)
    return pdf_path

# --- Interface Streamlit (O restante do c√≥digo permanece o mesmo) ---
st.title("üèîÔ∏è Algoritmo de Descida do Gradiente - An√°lise Completa")

st.sidebar.title("‚öôÔ∏è Configura√ß√µes")
x0_val = st.sidebar.slider("x‚ÇÄ (Ponto Inicial)", -2.0, 2.0, 0.3, 0.1)
y0_val = st.sidebar.slider("y‚ÇÄ (Ponto Inicial)", -2.0, 2.0, 1.2, 0.1)
lambda_passo = st.sidebar.slider("Tamanho do Passo (Œª)", 0.01, 0.5, 0.1, 0.01)
tolerancia_val = st.sidebar.number_input("Toler√¢ncia (Norma do Gradiente)", 1e-6, 1e-2, 1e-5, format="%.6f")
num_iteracoes_manual = st.sidebar.slider("Itera√ß√µes para C√°lculo Manual", 1, 5, 2, 1)

current_params = {"x0": x0_val, "y0": y0_val, "lambda": lambda_passo, "tolerancia": tolerancia_val}
ponto_inicial = np.array([x0_val, y0_val])

tab1, tab2, tab3, tab4 = st.tabs(["üìä Visualiza√ß√µes Iniciais", "üî¢ C√°lculos Manuais", "üéØ Algoritmo Completo", "üìÑ Download PDF"])

x_grid, y_grid = np.linspace(-2.5, 2.5, 150), np.linspace(-2.5, 2.5, 150)
X, Y = np.meshgrid(x_grid, y_grid)
Z = f(X, Y)

with tab1:
    st.header("Fun√ß√£o, Ponto Inicial e Vetor Gradiente")
    col1, col2 = st.columns(2)
    with col1:
        fig1 = plt.figure(figsize=(8, 6))
        ax1 = fig1.add_subplot(111, projection='3d')
        ax1.plot_surface(X, Y, Z, cmap='viridis', alpha=0.7)
        ax1.scatter(ponto_inicial[0], ponto_inicial[1], f(*ponto_inicial), color='red', s=100, label='Ponto Inicial', zorder=10)
        ax1.set_title('Fun√ß√£o Objetivo e Ponto Inicial')
        ax1.legend()
        st.pyplot(fig1)
    with col2:
        grad_inicial = grad_f(*ponto_inicial)
        fig2 = plt.figure(figsize=(8, 6))
        ax2 = fig2.add_subplot(111)
        contour = ax2.contour(X, Y, Z, levels=20, cmap='viridis')
        ax2.clabel(contour, inline=True, fontsize=8)
        ax2.scatter(ponto_inicial[0], ponto_inicial[1], color='red', s=100, label='Ponto Inicial', zorder=5)
        ax2.quiver(ponto_inicial[0], ponto_inicial[1], -grad_inicial[0], -grad_inicial[1], 
                   color='black', scale=1, scale_units='xy', angles='xy', label='-‚àáf (Dire√ß√£o de Descida)')
        ax2.set_title('Curvas de N√≠vel e Dire√ß√£o de Descida')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        st.pyplot(fig2)

with tab2:
    st.header(f"C√°lculo das Primeiras {num_iteracoes_manual} Itera√ß√µes")
    ponto_atual_manual, caminho_manual = ponto_inicial.copy(), [ponto_inicial.copy()]
    st.write(f"**Itera√ß√£o 0:** Ponto = ({ponto_atual_manual[0]:.5f}, {ponto_atual_manual[1]:.5f}), f(x,y) = {f(*ponto_atual_manual):.6f}")
    for i in range(num_iteracoes_manual):
        grad = grad_f(*ponto_atual_manual)
        ponto_novo_manual = ponto_atual_manual - lambda_passo * grad
        caminho_manual.append(ponto_novo_manual)
        with st.expander(f"Detalhes da Itera√ß√£o {i+1}"):
            st.latex(f"\\nabla f({ponto_atual_manual[0]:.4f}, {ponto_atual_manual[1]:.4f}) = \\begin{{bmatrix}} {grad[0]:.5f} \\\\ {grad[1]:.5f} \\end{{bmatrix}}")
            st.latex(f"x_{{{i+1}}} = {ponto_atual_manual[0]:.5f} - {lambda_passo} \\times ({grad[0]:.5f}) = {ponto_novo_manual[0]:.5f}")
            st.latex(f"y_{{{i+1}}} = {ponto_atual_manual[1]:.5f} - {lambda_passo} \\times ({grad[1]:.5f}) = {ponto_novo_manual[1]:.5f}")
        ponto_atual_manual = ponto_novo_manual
    st.session_state.caminho_manual_calculado = np.array(caminho_manual)

with tab3:
    st.header("Execu√ß√£o Completa do Algoritmo")
    if st.button("Executar Algoritmo at√© Converg√™ncia", type="primary"):
        with st.spinner("Calculando..."):
            caminho, iters, hist_norma, hist_func = algoritmo_gradiente_norma(ponto_inicial, lambda_passo, tolerancia_val)
            ponto_min = caminho[-1]
            st.session_state.resultados_execucao = {
                "caminho": caminho, "iteracoes": iters, "historico_norma": hist_norma,
                "historico_funcao": hist_func, "ponto_minimo": ponto_min,
                "caminho_manual": st.session_state.get('caminho_manual_calculado', [ponto_inicial])
            }
            st.session_state.parametros_execucao = current_params
            st.success(f"Converg√™ncia alcan√ßada em {iters} itera√ß√µes!")
            st.metric("Ponto de M√≠nimo (x, y)", f"({ponto_min[0]:.5f}, {ponto_min[1]:.5f})")
            st.metric("Valor M√≠nimo da Fun√ß√£o", f"{f(*ponto_min):.7f}")

    if 'resultados_execucao' in st.session_state:
        res = st.session_state.resultados_execucao
        caminho, ponto_min, p_inicial_execucao = res['caminho'], res['ponto_minimo'], res['caminho'][0]

        st.subheader("Visualiza√ß√£o do Caminho de Otimiza√ß√£o")
        col1, col2 = st.columns(2)
        with col1:
            fig3 = plt.figure()
            ax3 = fig3.add_subplot(111, projection='3d')
            ax3.plot_surface(X, Y, Z, cmap='viridis', alpha=0.6, rcount=100, ccount=100)
            ax3.plot(caminho[:, 0], caminho[:, 1], f(caminho[:, 0], caminho[:, 1]), 'r-o', markersize=2)
            ax3.scatter(*p_inicial_execucao, f(*p_inicial_execucao), color='green', s=100, label='In√≠cio')
            ax3.scatter(*ponto_min, f(*ponto_min), color='red', s=150, label='M√≠nimo')
            ax3.set_title('Caminho de Otimiza√ß√£o (3D)'); ax3.legend()
            st.pyplot(fig3)
        with col2:
            fig4, ax4 = plt.subplots()
            ax4.contour(X, Y, Z, levels=20, cmap='viridis')
            ax4.plot(caminho[:, 0], caminho[:, 1], 'r-o', markersize=2)
            ax4.scatter(*p_inicial_execucao, color='green', s=100, label='In√≠cio', zorder=5)
            ax4.scatter(*ponto_min, color='red', s=150, label='M√≠nimo', zorder=5)
            ax4.set_title('Caminho de Otimiza√ß√£o (Curvas de N√≠vel)'); ax4.legend()
            st.pyplot(fig4)
            
        st.subheader("Gr√°ficos de Converg√™ncia")
        col3, col4 = st.columns(2)
        with col3:
            fig5, ax5 = plt.subplots()
            ax5.semilogy(res['historico_norma'])
            ax5.axhline(y=st.session_state.parametros_execucao['tolerancia'], color='r', linestyle='--')
            ax5.set_title('Converg√™ncia da Norma do Gradiente'); ax5.set_xlabel('Itera√ß√£o'); ax5.set_ylabel('Norma (Log)')
            st.pyplot(fig5)
        with col4:
            fig6, ax6 = plt.subplots()
            ax6.plot(res['historico_funcao'])
            ax6.set_title('Evolu√ß√£o do Valor da Fun√ß√£o'); ax6.set_xlabel('Itera√ß√£o'); ax6.set_ylabel('f(x,y)')
            st.pyplot(fig6)
            
        temp_dir_imgs = tempfile.mkdtemp()
        paths = {k: os.path.join(temp_dir_imgs, f'{k}.png') for k in ['caminho_3d', 'caminho_contorno', 'convergencia_norma', 'convergencia_funcao']}
        fig3.savefig(paths['caminho_3d'], bbox_inches='tight'); fig4.savefig(paths['caminho_contorno'], bbox_inches='tight')
        fig5.savefig(paths['convergencia_norma'], bbox_inches='tight'); fig6.savefig(paths['convergencia_funcao'], bbox_inches='tight')
        st.session_state.paths_graficos = paths

with tab4:
    st.header("Download do Relat√≥rio em PDF")
    st.markdown("Gere um relat√≥rio completo em PDF com os par√¢metros, c√°lculos e gr√°ficos da **√∫ltima simula√ß√£o executada**.")

    if 'parametros_execucao' in st.session_state and st.session_state.parametros_execucao != current_params:
        st.warning("‚ö†Ô∏è Os par√¢metros foram alterados. Execute o algoritmo novamente para gerar um relat√≥rio atualizado.")

    if st.button("Gerar Relat√≥rio PDF", type="primary", disabled=('resultados_execucao' not in st.session_state)):
        if 'resultados_execucao' not in st.session_state:
            st.error("Por favor, execute o algoritmo na aba 'Algoritmo Completo' primeiro.")
        else:
            with st.spinner("Gerando PDF..."):
                try:
                    pdf_path = create_pdf_report(
                        st.session_state.parametros_execucao,
                        st.session_state.resultados_execucao,
                        st.session_state.paths_graficos
                    )
                    with open(pdf_path, "rb") as pdf_file:
                        pdf_bytes = pdf_file.read()

                    st.download_button(label="‚¨áÔ∏è Baixar Relat√≥rio", data=pdf_bytes, file_name="relatorio_descida_gradiente.pdf", mime="application/pdf")
                    os.unlink(pdf_path)
                    for path in st.session_state.paths_graficos.values(): os.unlink(path)
                except Exception as e:
                    st.error(f"Ocorreu um erro ao gerar o PDF: {e}")